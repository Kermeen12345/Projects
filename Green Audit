"""
The project 'Green Audit' consists of dataset containing 581012 records with the columns namely 'Elevation','Aspect','Slope','Horizontal_Distance_To_Hydrology',
'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points','Wilderness_Area','Soil_Type',
'Cover_Type'.

The link of the dataset is available on https://www.kaggle.com/datasets/uciml/forest-cover-type-dataset as Forest Cover Type Dataset
"""

"""
We then import the downloaded/ existing csv file using pandas in-built function
"""

#Import the csv file
file_path = '/content/covtype.csv'
import pandas as pd
df = pd.read_csv(file_path)

"""
We then get the informattion of data by describing it using pandas in-built function
"""

           #importing necessary libraries
import pandas as pd
df = pd.read_table(file_path, sep=",", header=None, names=["Elevation", "Aspect", "Slope", "Horizontal_Distance_To_Hydrology",
                                                           "Vertical_Distance_To_Hydrology","Horizontal_Distance_To_Roadways",
                                                           "Hillshade_9am", "Hillshade_Noon", "Hillshade_3pm", "Horizontal_Distance_To_Fire_Points",
                                                           "Wilderness_Area", "Soil_Type", ""])
           #show first two rows
print("The first two records are : ")
print(df.head(2))

           #show last two rows
print("The last two records are : ")
print(df.tail(2))

           #show dimensions
print("Dimensions : {}".format(df.shape))

           #show statistics
df.describe()

"""
Then we select the rows existing in the table on the basis of the condition(s). It is often used to fetch the records based on the conditions where the records are in large numbers.
"""

            #select top two rows where column 'Vertical_Distance_To_Hydrology' is '46'
df[df['Vertical_Distance_To_Hydrology']=='46'].head(2)

"""
Then we find the minimum, maximum, average, mean and count on the specific column of the table using pandas in-built functions. It is often used to analyze the numeric data.
"""

           #Finding avg,min,max,mean and count on 'Slope' column
print('Maximum Slope : {}'.format(df['Slope'].max()))
print('Minimum Slope : {}'.format(df['Slope'].min()))
print('Mean of Slope : {}'.format(df['Slope'].mean()))
print('Sum of Slope : {}'.format(df['Slope'].sum()))
print('Count of Slope : {}'.format(df['Slope'].count()))

"""
Similarly, one can use various pandas and other functions to fetch, analyze and organize the data in large number.
"""

"""
Moving forward to viewing and plotting the data, one can have various tools, libraries and modules present in python to make things easier. Some of the graphical representation and 
visualization of data includes Line Plot, Histogram, Density Plot, Scatter Plot, Heatmap, Pie Chart, Donut Plot, Box Plot, Time Series Graph, Plotting Annotation, Choropleth map, etc.

We shall look at each of the mentioned graphs and plots in detail.
"""

"""
Starting from the very first we have Line Plot. A Line Plot is a graph that shows the frequency, or the number of times, a value occurs in a data set. It is also referred as a dot-plot.

We are using Matplotlib library for plotting, which is an amazing Python library for data visualization. Almost all types of data visualization charts can be created using matplotlib.
"""

           #importing necessary libraries
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

          #importing the file
file_path = '/content/covtype.csv'
df = pd.read_csv(file_path)

          #plotting line-plot
sns.lineplot(data=df,x='Aspect',y='Slope',hue='Soil_Type')
plt.show()

"""
In this way we can create a line plot for the columns 'Aspect' as X-axis and 'Slope' as Y-axis. The 'Soil_Type' column acts as a parameter of hue which will represent the Soil_Type by 
different colors.
"""

"""
Expected Output Description : Here each line represents a different soil type, showing how the slope varies with aspect for each soil type. This visualization can help in understanding 
the relationship between aspect, slope, and soil type in the dataset.
"""

"""
Histogram is a good way to quickly visualize and analyze the distribution of the dataset. They are generated by bining data to count the number of frequencies in the data set.the 
appearance of a histogram depends entirely on the choice of the width of the bin. 
"""

           #importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

           #plotting histogram
df.hist(column='Horizontal_Distance_To_Roadways')
plt.show()

"""
Here we are generating histogram for the column 'Horizontal_Distance_To_Roadways'
"""

"""
Expected Output Description :Here, the range of horizontal distances to roadways and the y-axis representing the frequency or count of occurrences of each range. This visualization 
provides insight into the distribution of horizontal distances to roadways in the dataset, helping to understand the common distances and potential patterns within the data.
"""

"""
Just like Histogram, density plots are a good way to quickly visualize and analyze the distribution of the dataset. The appearance of density plots is dependent on bandwidth. They are 
created in such a way that the area under the curve is always equal to 1.
""""

           #importing necessary libraries
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

          #importing the file
file_path = '/content/covtype.csv'
df = pd.read_csv(file_path)

        #plotting density graph
sns.kdeplot(data=df, x="Horizontal_Distance_To_Fire_Points",
            y="Horizontal_Distance_To_Hydrology",shade=True)
plt.show()

""""
Here, we have column 'Horizontal_Distance_To_Fire_Points' as X-axis and 'Horizontal_Distance_To_Hydrology' as Y-axis. The KDE plot shades areas of higher density, allowing you to see 
regions where the two variables are more concentrated or sparse.
"""

"""
Expected Output Description : Here, plot shows the estimated distribution of points in the two-dimensional space defined by the horizontal distance to fire points and the horizontal 
distance to hydrology. The shading indicates areas of higher density, helping to visualize the concentration of data points and potential patterns or relationships between these two 
variables.
"""

"""
With the help of Scatter plot we can identify the relationship between two attributes, groups of points and outliers.
"""

           #importing necessary libraries
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

          #plotting scatter plot
sns.scatterplot(data=df,x='Wilderness_Area',y='Cover_Type',hue='Soil_Type')
plt.show()

"""
Here, we have column 'Wilderness_Area' as X-axis and 'Cover_Type' asY-axis. The 'Soil_Type' column acts as a parameter of hue which will represent the Soil_Type by different colors. The 
denser color represents the densed area and the lighter color represents the lightly densed or no dense area.
"""

"""
Expected Output Description : Here, each point represents a combination of wilderness area and cover type. The points are colored according to the soil type. This visualization can help 
to understand the relationships between wilderness areas, cover types, and soil types in the dataset. It might reveal clusters or patterns that suggest correlations between these 
variables.
"""

"""
Heatmaps are used to visualize data in a two-dimensional format as a coloured map so that different colour variations represent different patterns between features.  A heatmap is a 
method of data visualization that plots data by replacing numbers with colours, making it easy for humans to understand patterns between different entities in the dataset.
"""

       #importing necessary library
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

      #importing the file
trees = pd.read_csv(file_path)

      # Create a heatmap of the correlations
correlations = trees.corr()
sns.heatmap(correlations, cmap="coolwarm")
plt.show()

"""
Here, the line 'correlations = trees.corr()' calculates the correlation matrix of the variables in the DataFrame. The heatmap colors indicate the strength and direction of the 
correlations: warmer colors represent positive correlations, cooler colors represent negative correlations, and neutral colors represent no correlation.
"""

"""
Expected Output Description : Here, each cell represents the correlation between two variables. The color intensity of each cell indicates the strength and direction of the correlation: 
darker shades represent stronger correlations (either positive or negative), while lighter shades represent weaker correlations or no correlation. Positive correlations are typically 
indicated by warm colors (reds), while negative correlations are indicated by cool colors (blues).
"""

"""
A pie chart is created by dividing a circle into two or more sections depending on the number of entities we want to visualize. It is used to analyze the distribution of data and the 
proportion of each feature in the data set.
"""

              #import necessary library
import pandas as pd

             #create groups and labels
group_size = [sum(df.Hillshade_9am), sum(df.Hillshade_Noon), sum(df.Hillshade_3pm)]
group_labels = ["Hillshade_9am\n"+str(sum(df.Hillshade_9am)),
                "Hillshade_Noon\n"+str(sum(df.Hillshade_Noon)),
                "Hillshade_3pm\n"+str(sum(df.Hillshade_3pm))]

              #customizing colors
custom_colors = ["skyblue", "yellow", 'green']

              #plotting pie chart
plt.figure(figsize=(5, 5))
plt.pie(group_size, labels=group_labels, colors=custom_colors)
plt.rc('font', size=12)
plt.title("Hillshades at diff. hours", fontsize=20)
plt.show()

"""
Here we have used the pyplot.pie() function of the matplotlib library to visualize a pie chart. Customizing the colors and labelling groups helps in identifying them easily. This code 
calculates the sum of values in three different columns (Hillshade_9am, Hillshade_Noon, Hillshade_3pm) of the DataFrame df, and assigns these sums to a list called group_size. It also 
creates labels for these groups by combining the column names with the respective sums, and assigns them to group_labels.
"""

"""
Expected Output Description : Here the pie chart showing the distribution of total hillshade values at different hours of the day. Each slice of the pie represents the total hillshade 
values at a specific time, and the size of each slice corresponds to the proportion of the total sum represented by that time. The title "Hillshades at diff. hours" is displayed above 
the pie chart.
"""

"""
The Donut plot is similar to a pie chart, except it has a hole in the middle similar to a donut. The data portion of the donut chart is called the “donut”. By default, the ring size is 
30% of the ring radius, which means the hole occupies 70%. These percentages are the default values, regardless of the size of the donut. The central hole allows you to inject additional
information into the graph.
"""

            #importing necessary libraries
import seaborn as sns
import matplotlib.pyplot as plt

            #create groups and labels
group_size = [sum(df.Hillshade_9am), sum(df.Hillshade_Noon), sum(df.Hillshade_3pm)]
group_labels = ["Hillshade_9am\n"+str(sum(df.Hillshade_9am)),
                "Hillshade_Noon\n"+str(sum(df.Hillshade_Noon)),
                "Hillshade_3pm\n"+str(sum(df.Hillshade_3pm))]

          #customizing colors
custom_colors = ["aqua", "deepskyblue", "teal"]

          #plotting donut plot         
plt.figure(figsize=(5, 5))
plt.pie(group_size, labels=group_labels, colors=custom_colors)
central_circle = plt.Circle((0, 0), 0.5, color='lightgreen')
fig = plt.gcf()
fig.gca().add_artist(central_circle)
plt.rc('font', size=12)
plt.title("Hillshades at diff. hours", fontsize=20)
plt.show()

"""
Here Customizing the colors and labelling groups helps in identifying them easily. This code calculates the sum of values in three different columns (Hillshade_9am, Hillshade_Noon,
Hillshade_3pm) of the DataFrame df, and assigns these sums to a list called group_size. It also creates labels for these groups by combining the column names with the respective sums,
and assigns them to group_labels.
"""

"""
Expected Output Description : Here a pie chart shows the distribution of total hillshade values at different hours of the day, with a central circle added to create a donut chart effect.
The title "Hillshades at diff. hours" is displayed above the pie chart.
"""

"""
A box plot is a statistical data visualization technique for analyzing the distribution and patterns of numerical data points of a dataset. It represents quartile 1, quartile 3, median, 
maximum and minimum data points of a feature which helps to understand the distribution of the numerical values of a dataset. The box portion of a box plot contains three lines:

The first line in the top represents quartile 3 of the data points, which means that 75% of the data lies below this point
The second line in the middle represents the median value of the data points, which means that 50% of the data lies below this point
The third line in the box plot represents quartile 1 of the data points, which means that 25% of the data lies below this point
The two horizontal lines below and above the box are known as whisker lines, the above whisker represents maximum value, and the lower whisker represents minimum value.
"""

         #importing necessary libraries
import plotly.express as px
import pandas as pd

          #plotting box plot
fig = px.box(df, y="Horizontal_Distance_To_Fire_Points")
fig.show()

"""
Here, the code uses the Plotly Express library (plotly.express) to create a box plot. It visualizes the distribution of the variable "Horizontal_Distance_To_Fire_Points" from the 
DataFrame 'df'. 
"""

"""
Expected Output Description : Here an interactive box plot shows the distribution of values in the "Horizontal_Distance_To_Fire_Points" column. The box plot includes elements such as the
median (line inside the box), quartiles (edges of the box), and any outliers (points outside the whiskers). Viewers can hover over different parts of the plot to see specific data points
and statistical information.
"""

"""
A time-series graph is a line plot that displays trends or patterns over a dataset collected over an interval of time. Time-series data is the data collected over an interval of time. 
While visualizing a time-series graph, the time intervals lie on the x-axis, and the data points collected over those time intervals lie on the y-axis.
"""

           #import necessary library
import plotly.express as px

          #plotting time-series graph
figure = px.line(df, x = df.Wilderness_Area, y = df.Soil_Type)
figure.show()

"""
Here, we have used Plotly Express library to create a line plot. It visualizes the relationship between two categorical variables, "Wilderness_Area" and "Soil_Type", from the DataFrame
df.
"""

"""
The interpretation heavily depends on the nature of the data in the "Wilderness_Area" and "Soil_Type" columns:

If these columns contain categorical or ordinal data, the line plot will likely attempt to connect the distinct categories or values, but this might not make much sense in terms of a
line plot's typical usage.

If these columns contain numerical data, the line plot will attempt to draw lines connecting the numerical values. However, since both axes represent categorical or discrete data, the 
lines might not convey meaningful relationships. It's more common to use line plots when one or both axes represent continuous variables.

Expected Output Description : Here, the output might not be very informative or meaningful depending on the nature of the data in the "Wilderness_Area" and "Soil_Type" columns. 
If these columns contain categorical data, other types of plots such as bar plots or scatter plots might be more suitable for visualizing relationships between them.
"""

"""
Plotting annotations makes your graphs self-explanatory. Using annotations can help you understand and explain data visualizations very easily.
"""

          #importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

          # Generate some data
df = pd.DataFrame({
    'Soil_Type': [1, 2, 3, 4, 5],
    'Cover_Type': [6, 7, 8, 9, 10]
})

          # Create a scatter plot
plt.scatter(df['Soil_Type'], df['Cover_Type'])

          # Add an annotation
plt.annotate('This point has a Soil_Type of 2 and a Cover_Type of 7', xy=(2, 7), 
             xytext=(3, 8),arrowprops=dict(facecolor='yellow', shrink=0.05))

          # Show the plot
plt.show()

"""
Here we have used code that generates a scatter plot using matplotlib to visualize the relationship between two variables, 'Soil_Type' and 'Cover_Type', from a DataFrame df.Then, it adds
an annotation (plt.annotate()) to the plot, pointing to a specific data point with coordinates (2, 7) and providing additional information about that point. The annotation includes text 
and an arrow pointing to the specified data point, with customization options such as arrow color and size.
"""

"""
Expected Output Description : Here a scatter plot with five data points is generated, each representing a combination of 'Soil_Type' and 'Cover_Type'. Additionally, there is an 
annotation pointing to the data point with a 'Soil_Type' of 2 and a 'Cover_Type' of 7, providing additional information about that specific data point. The arrow connecting the 
annotation to the data point is colored yellow.
"""

"""
A choropleth map is a shaded map where the intensity of the colour indicates the intensity or quantity of a particular feature. They represent the intensity of an entity by indicating 
shades of dark colours on regions with high intensities of an entity and light colours on regions with lower intensities of an entity.
"""

              #importing necessary library
import matplotlib.pyplot as plt

            # Create a choropleth plot of the data
df.plot(column='Cover_Type', cmap='OrRd')

            # plotting choropleth map
plt.title('Choropleth Plot of Cover Type')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.show()

"""
Here, the column parameter specifies the column in the DataFrame containing the data to be visualized on the map, and cmap specifies the colormap to be used for the visualization.
After creating the plot, the code sets the title, x-axis label, and y-axis label for the plot using plt.title(), plt.xlabel(), and plt.ylabel() respectively.
"""

"""
Expected Output Description : Here a choropleth plot is generated where areas on the map are colored based on the values of the 'Cover_Type' column. The color intensity or shade 
represents different levels of the cover type, with the 'OrRd' colormap transitioning from orange to red. The plot includes a title ("Choropleth Plot of Cover Type") and labeled axes 
for longitude and latitude.
"""



#Google Colaboratory Link : https://colab.research.google.com/drive/1k9Zp-JFbDrEw94-zHxX3sYEe9O0_9uWI?usp=sharing
